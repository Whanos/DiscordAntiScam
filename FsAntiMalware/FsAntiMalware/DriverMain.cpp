#include <fltKernel.h>
#include <dontuse.h>
#include <suppress.h>
#include <ntddk.h>
#include "FsCallbacks.h"

#pragma prefast(disable:__WARNING_ENCODE_MEMBER_FUNCTION_POINTER, "Not valid for kernel mode drivers")

#define ANTIMALWARE_FILTER_NAME  L"AntiMalwareFilter"

typedef struct _ANTIMALWARE_FILTER_DATA {
	PFLT_FILTER g_minifilterHandle = NULL;
} ANTIMALWARE_FILTER_DATA, *PNULL_FILTER_DATA;

ANTIMALWARE_FILTER_DATA AntiMalwareFilterData;

// Defining our functions

DRIVER_INITIALIZE DriverEntry;
NTSTATUS
DriverEntry (
    IN PDRIVER_OBJECT DriverObject,
    IN PUNICODE_STRING RegistryPath
);

NTSTATUS
AntiMalwareUnload (
    IN FLT_FILTER_UNLOAD_FLAGS Flags
);

NTSTATUS AntiMalwareQueryTeardown (
    IN PCFLT_RELATED_OBJECTS FltObjects,
    IN FLT_INSTANCE_QUERY_TEARDOWN_FLAGS Flags
);


// Registering operation callbacks

CONST FLT_OPERATION_REGISTRATION g_callbacks[] = {
    {
        IRP_MJ_CREATE,
        0,
        CreatePreOpCallback,
        CreatePostOpCallback
    },
    
    { IRP_MJ_OPERATION_END }
};

CONST FLT_REGISTRATION FilterRegistration = {

    sizeof(FLT_REGISTRATION),           //  Size
    FLT_REGISTRATION_VERSION,           //  Version
    0,                                  //  Flags

    NULL,                               //  Context
    g_callbacks,                        //  Operation callbacks

    AntiMalwareUnload,                  //  FilterUnload

    NULL,                               //  InstanceSetup
    AntiMalwareQueryTeardown,           //  InstanceQueryTeardown
    NULL,                               //  InstanceTeardownStart
    NULL,                               //  InstanceTeardownComplete

    NULL,                               //  GenerateFileName
    NULL,                               //  GenerateDestinationFileName
    NULL                                //  NormalizeNameComponent
};

// Driver entry function

NTSTATUS DriverEntry(
    IN PDRIVER_OBJECT DriverObject, 
    IN PUNICODE_STRING RegistryPath
) {
    UNREFERENCED_PARAMETER(RegistryPath);

	NTSTATUS status = FltRegisterFilter(
        DriverObject, 
        &FilterRegistration, 
        &AntiMalwareFilterData.g_minifilterHandle
    );

    FLT_ASSERT(NT_SUCCESS(status));

    if (NT_SUCCESS(status)) {
        // Begin filtering I/O to filesystem.

        status = FltStartFiltering(AntiMalwareFilterData.g_minifilterHandle);

        if (!NT_SUCCESS(status)) {
            FltUnregisterFilter(AntiMalwareFilterData.g_minifilterHandle);
        }
    }

    return status;
}

// Called to unload the driver

NTSTATUS
AntiMalwareUnload(
    IN FLT_FILTER_UNLOAD_FLAGS Flags
) {
    UNREFERENCED_PARAMETER(Flags);

    PAGED_CODE();

    FltUnregisterFilter(AntiMalwareFilterData.g_minifilterHandle);

    return STATUS_SUCCESS;
}

NTSTATUS
AntiMalwareQueryTeardown(
    IN PCFLT_RELATED_OBJECTS FltObjects,
    IN FLT_INSTANCE_QUERY_TEARDOWN_FLAGS Flags
) {
    UNREFERENCED_PARAMETER(FltObjects);
    UNREFERENCED_PARAMETER(Flags);

    PAGED_CODE();

    return STATUS_SUCCESS;
}